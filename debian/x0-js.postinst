#!/bin/sh

#DEBHELPER#

if [ "$1" = "configure" ]; then

	# system vars
	WEBSERVER_DIR="/var/www"
	APP_DIR="/${WEBSERVER_DIR}/vhosts/x0"
	APP_PYTHONDIR="/${APP_DIR}/python"
	APP_STATICDIR="/${APP_DIR}/static"

	ETC_SSL="/etc/ssl"
	ETC_SSL_APACHE="${ETC_SSL}/apache"

	CERT_CA_FILE="${ETC_SSL_APACHE}/x0-ca-cert.pem"
	CERT_CA_KEY_FILE="${ETC_SSL_APACHE}/x0-ca-cert-key.pem"
	CERT_FILE="${ETC_SSL_APACHE}/x0-cert.pem"
	CERT_KEY_FILE="${ETC_SSL_APACHE}/x0-cert-key.pem"
	CERT_CSR_FILE="${ETC_SSL_APACHE}/x0-csr.pem"

	CERT_CA_PASSPHRASE="change4prod-ca"
	CERT_PASSPHRASE="change4prod"

	DEMO_FQDN="x0-test.webcodex.de"

	WEBSERVERCONFDIR="/etc/apache2"
	VHOSTCONFIGFILE="vhost-x0.conf"

	BASEDIR="/var/lib/x0"

	DBNAME="x0"
	DBUSER="x0"

	# make postgres local unix domain socket connection trusted
	PGCONFFILE=$(find /etc/postgresql -name "pg_hba.conf")

	sed -i ${PGCONFFILE} -r -e 's/^local\s+all\s+postgres\s+peer$/local   all             postgres                                trust/g'

	# restart postgres
	service postgresql restart

	# check database x0 exists
	psql -l -U postgres | grep -q ${DBNAME}

	# if not exists, create database
	if [ $? -eq 1 ]; then
		psql -U postgres -f ${BASEDIR}/database/x0.DB.sql
	fi

	# create ssl /etc dir if not exists
	if [ ! -d ${ETC_SSL_APACHE} ]; then
		mkdir -p ${ETC_SSL_APACHE};
	fi

	# generate apache ssl cert
	openssl genrsa -des3 -out ${CERT_CA_KEY_FILE} -passout pass:${CERT_CA_PASSPHRASE} 4096
	openssl req -x509 -new -nodes -key ${CERT_CA_KEY_FILE} -sha512 -days 365 -out ${CERT_CA_FILE} -subj "/C=DE/ST=MA/O=clickIT/CN=ca.local" -passin pass:${CERT_CA_PASSPHRASE}
	openssl genrsa -out ${CERT_KEY_FILE} -passout pass:${CERT_PASSPHRASE} 4096
	openssl req -new -sha512 -key ${CERT_KEY_FILE} -subj "/C=DE/ST=MA/O=clickIT/CN=${DEMO_FQDN}" -out ${CERT_CSR_FILE} -passin pass:${CERT_PASSPHRASE}
	openssl x509 -req -in ${CERT_CSR_FILE} -CA ${CERT_CA_FILE} -CAkey ${CERT_CA_KEY_FILE} -CAcreateserial -out ${CERT_FILE} -days 365 -sha512 -passin pass:${CERT_CA_PASSPHRASE}

	# copy apache config
	cp ${BASEDIR}/conf/${VHOSTCONFIGFILE} ${WEBSERVERCONFDIR}/sites-available/
	cp ${BASEDIR}/conf/wsgi.conf ${WEBSERVERCONFDIR}/mods-available/

	# activate apache vhost
	ln -s ${WEBSERVERCONFDIR}/sites-available/${VHOSTCONFIGFILE} ${WEBSERVERCONFDIR}/sites-enabled/${VHOSTCONFIGFILE}

	# copy base system files to given vhosts (on update)
	for vhost in $(cat /etc/x0-vhosts.conf); do
		cp ${APP_DIR}/*.js ${vhost}/
		cp ${APP_DIR}/index.html ${vhost}/
		cp ${APP_DIR}/static/* ${vhost}/static/
		cp ${APP_DIR}/python/*.py ${vhost}/python/
		chown -R www-data:deploy ${vhost}
	done

	# restart apache
	service apache2 restart

fi
